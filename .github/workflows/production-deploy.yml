name: Production Deploy

concurrency: production

on:
  release:
    types: [ published ]

env:
  COMPOSER_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment:
      name: production

    steps:
      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          tools: composer, cs2pr

      - name: Set up NodeJS
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Composer cache
        id: composer-deploy-cache
        uses: actions/cache@v3
        with:
          path: vendor
          key: composer-deploy-${{ hashFiles( 'composer.lock' ) }}-${{ hashFiles( '.github/workflows/production-deploy.yml' ) }}

      - name: NodeJS cache
        id: node-deploy-cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: node-deploy-${{ hashFiles( 'package-lock.json' ) }}-${{ hashFiles( '.github/workflows/production-deploy.yml' ) }}

      - name: WP plugins cache
        id: wp-plugins-deploy-cache
        uses: actions/cache@v3
        with:
          path: wp-content/plugins
          key: wp-plugins-deploy-${{ hashFiles( 'composer.lock' ) }}-${{ hashFiles( '.github/workflows/production-deploy.yml' ) }}

      - name: Travelopia packages cache
        id: travelopia-packages-deploy-cache
        uses: actions/cache@v3
        with:
          path: wp-content/mu-plugins/travelopia
          key: travelopia-packages-deploy-${{ hashFiles( 'composer.lock' ) }}-${{ hashFiles( '.github/workflows/production-deploy.yml' ) }}

      - name: Install Composer dependencies
        if: steps.composer-deploy-cache.outputs.cache-hit != 'true'
        run: composer install --no-dev --optimize-autoloader

      - name: Install NodeJS dependencies
        if: steps.node-deploy-cache.outputs.cache-hit != 'true'
        run: npm ci

      - name: Build PHP, CSS and JS Assets
        run: npm run build

      - name: Deploy to Pantheon
        env:
          PANTHEON_SSH_PRIVATE_KEY: ${{ secrets.PANTHEON_SSH_PRIVATE_KEY }}
          PANTHEON_GIT_REPOSITORY: ${{ secrets.PANTHEON_GIT_REPOSITORY }}
          PANTHEON_GIT_BRANCH: master
          RELEASE_VERSION: ${{ github.ref_name }}
        run: bash .bin/deploy.sh
