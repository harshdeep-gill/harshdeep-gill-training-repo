/**
 * Functions.
 */

@use "sass:math";

@function calculate-percentage( $target, $context: 1500px ) {

	@return 100% * ( $target / $context );
}

@function calculate-em( $px-value, $parent-px-value: 16px ) {

	@return math.div( $px-value, $parent-px-value ) * 1em;
}

@function calculate-rem( $px-value, $parent-px-value: 16px ) {

	@return math.div( $px-value, $parent-px-value ) * 1rem;
}

@function strip-unit( $number ) {

	@return $number / ( $number * 0 + 1 );
}

@function calculate-px( $original-value, $parent-px-value: 16 ) {

	@return strip-unit( $original-value * $parent-px-value ) * 1px;
}

@function calculate-vw( $px-value, $viewport-width ) {

	@return math.div( $px-value, $viewport-width ) * 100vw;
}

@function grid-size( $size ) {

	@return map-get( $grid-breakpoints, $size );
}

@function color( $name ) {

	@return map-get( $colors, $name );
}

@function spacing( $name ) {

	@return map-get( $spacing, $name );
}

@function calculate-clamp($min-width, $max-width, $size-at-min-width, $size-at-max-width) {
	$slope: math.div($size-at-max-width - $size-at-min-width, $max-width - $min-width);
	$y-axis-intersection: -1 * $min-width * $slope + $size-at-min-width;
	$return-value: clamp(#{$size-at-min-width}, #{$y-axis-intersection} + #{$slope} * 100vw, #{$size-at-max-width});

	@return $return-value;
}
